// Set the theme colors map to be used by the color functions
// --------------------------------------------------------------------------------------------
@mixin set-theme-colors($colorsMap) {
  $theme-colors: $colorsMap !global;
}

// Gets the active color's css variable from a variation. Alpha is optional.
// --------------------------------------------------------------------------------------------
// Example usage:
// current-color(base) => var(--ion-color-base)
// current-color(contrast, 0.1) => rgba(var(--ion-color-contrast-rgb), 0.1)
// --------------------------------------------------------------------------------------------
@function current-color($variation, $alpha: null, $subtle: false) {
  $variable: if($subtle, "--ion-color-subtle-#{$variation}", "--ion-color-#{$variation}");

  @if $alpha == null {
    @return var(#{$variable});
  } @else {
    @return rgba(var(#{$variable}-rgb), $alpha);
  }
}

// Gets the specific color's css variable from the name and variation. Alpha/rgb are optional.
// --------------------------------------------------------------------------------------------
// Example usage:
// ion-color(primary, base) => var(--ion-color-primary, #3880ff)
// ion-color(secondary, contrast) => var(--ion-color-secondary-contrast)
// ion-color(primary, base, 0.5) => rgba(var(--ion-color-primary-rgb, 56, 128, 255), 0.5)
// --------------------------------------------------------------------------------------------
@function ion-color($name, $variation, $alpha: null, $rgb: null, $subtle: false) {
  @if not($theme-colors) {
    @error 'No theme colors set. Please make sure to call set-theme-colors($colorsMap) before using ion-color()';
  }

  $values: map-get($theme-colors, $name);
  $values: map-get($values, if($subtle, subtle, bold));

  $value: map-get($values, $variation);

  // If the color requested is subtle we return `--ion-color-primary-subtle-contrast`
  // Otherwise we return `--ion-color-primary-contrast`
  $variable: if($subtle, "--ion-color-#{$name}-subtle-#{$variation}", "--ion-color-#{$name}-#{$variation}");

  // If the variation being used is base, we do not include the variant so
  // If the color requested is subtle we return `--ion-color-primary-subtle`
  // Otherwise we return `--ion-color-primary`
  @if ($variation == base) {
    $variable: if($subtle, "--ion-color-#{$name}-subtle", "--ion-color-#{$name}");
  }

  @if ($alpha) {
    $value: color-to-rgb-list($value);

    @return rgba(var(#{$variable}-rgb, $value), $alpha);
  }

  @if ($rgb) {
    $value: color-to-rgb-list($value);
    $variable: #{$variable}-rgb;
  }

  @return var(#{$variable}, $value);
}

// Mixes a color with black to create its shade.
// --------------------------------------------------------------------------------------------
@function get-color-shade($color) {
  @if (type-of($color) != color) {
    @return $color;
  }
  @return mix(#000, $color, 12%);
}

// Mixes a color with white to create its tint.
// --------------------------------------------------------------------------------------------
@function get-color-tint($color) {
  @if (type-of($color) != color) {
    @return $color;
  }
  @return mix(#fff, $color, 10%);
}

// Converts a color to a comma separated rgb.
// --------------------------------------------------------------------------------------------
@function color-to-rgb-list($color) {
  @if (type-of($color) != color) {
    @return $color;
  }
  @return #{red($color)}, #{green($color)}, #{blue($color)};
}

// Generates the color classes and variables
// based on the colors map
// --------------------------------------------------------------------------------------------
@mixin generate-color($color-name) {
  @if not($theme-colors) {
    @error 'No theme colors set. Please make sure to call set-theme-colors($colorsMap) before using ion-color()';
  }

  $colors: map-get($theme-colors, $color-name);
  $bold-colors: map-get($colors, bold);

  // Grab the bold color variants
  $base: map-get($bold-colors, base);
  $contrast: map-get($bold-colors, contrast);
  $shade: map-get($bold-colors, shade);
  $tint: map-get($bold-colors, tint);

  // Generate default (bold) color variables
  --ion-color-base: var(--ion-color-#{$color-name}, #{$base}) !important;
  --ion-color-base-rgb: var(--ion-color-#{$color-name}-rgb, #{color-to-rgb-list($base)}) !important;
  --ion-color-contrast: var(--ion-color-#{$color-name}-contrast, #{$contrast}) !important;
  --ion-color-contrast-rgb: var(--ion-color-#{$color-name}-contrast-rgb, #{color-to-rgb-list($contrast)}) !important;
  --ion-color-shade: var(--ion-color-#{$color-name}-shade, #{$shade}) !important;
  --ion-color-tint: var(--ion-color-#{$color-name}-tint, #{$tint}) !important;

  // Grab the subtle colors map if it exists
  $subtle-colors: map-get($colors, subtle);

  // Grab the subtle color variants
  @if $subtle-colors != null {
    $base: map-get($subtle-colors, base);
    $contrast: map-get($subtle-colors, contrast);
    $shade: map-get($subtle-colors, shade);
    $tint: map-get($subtle-colors, tint);
  }

  // Generate subtle color variables
  @if $subtle-colors != null {
    --ion-color-subtle-base: var(--ion-color-#{$color-name}-subtle, #{$base}) !important;
    --ion-color-subtle-contrast: var(--ion-color-#{$color-name}-subtle-contrast, #{$contrast}) !important;
    --ion-color-subtle-shade: var(--ion-color-#{$color-name}-subtle-shade, #{$shade}) !important;
    --ion-color-subtle-tint: var(--ion-color-#{$color-name}-subtle-tint, #{$tint}) !important;
  }
}

// Generates the CSS variables for each color
// based on the colors map
// --------------------------------------------------------------------------------------------
@mixin generate-color-variables() {
  @if not($theme-colors) {
    @error 'No theme colors set. Please make sure to call set-theme-colors($colorsMap) before using ion-color()';
  }

  @each $color-name, $value in $theme-colors {
    $bold-colors: map-get($value, bold);
    @if $bold-colors != null {
      --ion-color-#{$color-name}: #{map-get($bold-colors, base)};
      --ion-color-#{$color-name}-rgb: #{color-to-rgb-list(map-get($bold-colors, base))};
      --ion-color-#{$color-name}-contrast: #{map-get($bold-colors, contrast)};
      --ion-color-#{$color-name}-contrast-rgb: #{color-to-rgb-list(map-get($bold-colors, contrast))};
      --ion-color-#{$color-name}-shade: #{map-get($bold-colors, shade)};
      --ion-color-#{$color-name}-tint: #{map-get($bold-colors, tint)};
    }

    $subtle-colors: map-get($value, subtle);
    @if $subtle-colors != null {
      --ion-color-#{$color-name}-subtle: #{map-get($subtle-colors, base)};
      --ion-color-#{$color-name}-subtle-contrast: #{map-get($subtle-colors, contrast)};
      --ion-color-#{$color-name}-subtle-shade: #{map-get($subtle-colors, shade)};
      --ion-color-#{$color-name}-subtle-tint: #{map-get($subtle-colors, tint)};
    }
  }
}
