import { h } from '@stencil/core';
import type { Meta, StoryObj } from '@stencil/storybook-plugin';
import { chevronDown, chevronForward } from 'ionicons/icons';

import { Accordion } from './accordion';

const meta: Meta<Accordion> = {
  title: 'Accordion',
  component: Accordion,
  parameters: {
    layout: 'centered',
  },
  argTypes: {
    value: {
      control: 'text',
      description: 'The value of the accordion. Defaults to an autogenerated value.',
    },
    disabled: {
      control: 'boolean',
      description: 'If true, the accordion cannot be interacted with.',
    },
    readonly: {
      control: 'boolean',
      description: 'If true, the accordion cannot be interacted with, but does not alter the opacity.',
    },
    toggleIcon: {
      control: 'select',
      options: [chevronDown, chevronForward],
      description: 'The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.',
    },
    toggleIconSlot: {
      control: 'select',
      options: ['start', 'end'],
      description: 'The slot inside of ion-item to place the toggle icon.',
    },
  },
  args: {
    toggleIconSlot: 'end',
    toggleIcon: chevronDown,
  },
};

export default meta;

type Story = StoryObj<Accordion>;

export const Default: Story = {
  render: (props) => (
    <div style={{ width: '300px' }}>
      <ion-accordion-group>
        <ion-accordion {...props}>
          <ion-item slot="header">
            <ion-label>First Accordion</ion-label>
          </ion-item>
          <div slot="content" class="ion-padding">
            First Accordion Content
          </div>
        </ion-accordion>
        <ion-accordion>
          <ion-item slot="header">
            <ion-label>Second Accordion</ion-label>
          </ion-item>
          <div slot="content" class="ion-padding">
            Second Accordion Content
          </div>
        </ion-accordion>
        <ion-accordion>
          <ion-item slot="header">
            <ion-label>Third Accordion</ion-label>
          </ion-item>
          <div slot="content" class="ion-padding">
            Third Accordion Content
          </div>
        </ion-accordion>
      </ion-accordion-group>
    </div>
  ),
};

export const CustomToggle: Story = {
  render: () => {
    function toggleAccordion() {
      const accordionGroup = document.querySelector('ion-accordion-group') as HTMLIonAccordionGroupElement
      if (accordionGroup.value === 'second') {
        accordionGroup.value = undefined;
      } else {
        accordionGroup.value = 'second';
      }
    }

    return (
      <div>
        <ion-accordion-group>
          <ion-accordion value="first">
            <ion-item slot="header" color="light">
              <ion-label>First Accordion</ion-label>
            </ion-item>
            <div class="ion-padding" slot="content">First Content</div>
          </ion-accordion>
          <ion-accordion value="second">
            <ion-item slot="header" color="light">
              <ion-label>Second Accordion</ion-label>
            </ion-item>
            <div class="ion-padding" slot="content">Second Content</div>
          </ion-accordion>
          <ion-accordion value="third">
            <ion-item slot="header" color="light">
              <ion-label>Third Accordion</ion-label>
            </ion-item>
            <div class="ion-padding" slot="content">Third Content</div>
          </ion-accordion>
        </ion-accordion-group>

        <ion-button class="ion-margin-top" onClick={() => toggleAccordion()}>Toggle Second Accordion</ion-button>
      </div>
    )
  }
}

export const Disabled: Story = {
  args: {
    disabled: true,
  },
  render: (props) => (
    <div style={{ width: '300px' }}>
      <link rel="stylesheet" href="/css/core.css" />
      <ion-accordion-group>
        <ion-accordion {...props}>
          <ion-item slot="header">
            <ion-label>Disabled Accordion</ion-label>
          </ion-item>
          <div slot="content" class="ion-padding">
            This accordion is disabled and cannot be expanded
          </div>
        </ion-accordion>
        <ion-accordion>
          <ion-item slot="header">
            <ion-label>Regular Accordion</ion-label>
          </ion-item>
          <div slot="content" class="ion-padding">
            This accordion can be expanded
          </div>
        </ion-accordion>
      </ion-accordion-group>
    </div>
  ),
};

export const ReadOnly: Story = {
  args: {
    readonly: true,
  },
  render: (props) => (
    <div style={{ width: '300px' }}>
      <link rel="stylesheet" href="/css/core.css" />
      <ion-accordion-group>
        <ion-accordion {...props}>
          <ion-item slot="header">
            <ion-label>Read-only Accordion</ion-label>
          </ion-item>
          <div slot="content" class="ion-padding">
            This accordion is read-only and cannot be expanded
          </div>
        </ion-accordion>
        <ion-accordion>
          <ion-item slot="header">
            <ion-label>Regular Accordion</ion-label>
          </ion-item>
          <div slot="content" class="ion-padding">
            This accordion can be expanded
          </div>
        </ion-accordion>
      </ion-accordion-group>
    </div>
  ),
};

export const CustomToggleIcon: Story = {
  args: {
    toggleIcon: chevronForward,
  },
  render: (props) => (
    <div style={{ width: '300px' }}>
      <link rel="stylesheet" href="/css/core.css" />
      <ion-accordion-group>
        <ion-accordion {...props}>
          <ion-item slot="header">
            <ion-label>Custom Toggle Icon</ion-label>
          </ion-item>
          <div slot="content" class="ion-padding">
            This accordion uses a custom toggle icon
          </div>
        </ion-accordion>
      </ion-accordion-group>
    </div>
  ),
};

export const ToggleIconSlotStart: Story = {
  args: {
    toggleIconSlot: 'start',
  },
  render: (props) => (
    <div style={{ width: '300px' }}>
      <link rel="stylesheet" href="/css/core.css" />
      <ion-accordion-group>
        <ion-accordion {...props}>
          <ion-item slot="header">
            <ion-label>Toggle Icon at Start</ion-label>
          </ion-item>
          <div slot="content" class="ion-padding">
            This accordion has the toggle icon at the start
          </div>
        </ion-accordion>
      </ion-accordion-group>
    </div>
  ),
};
